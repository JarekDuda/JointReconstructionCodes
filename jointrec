/* 
 * File:   jointrec.cpp
 * Author: Jarek Duda
 *
 * Created on September 17, 2014, 11:41 AM
 */

#include <cstdlib>
#include <iostream>
#include <fstream>
#include <math.h>
#include<vector>
#include<algorithm>
#include <utility>

const int N=4, Np = 1<<N, mask = Np-1;         // each packet is 1/N size of the message    N <= 8         
const uint64_t INITSTATE = 0;            // initial state for the coding
const int STEP_LIMIT = 5E6;              // the main tree will use STEP_LIMIT * 32bytes

using namespace std;
typedef unsigned char byte;
typedef uint32_t uint;                       

int count1(byte c) {int s=0; while(c){s+= c&1; c>>=1;}; return s;}   // count "1"
void print(uint64_t c, int n=8) {for(int i=0;i<n;i++) cout<< (1&(c>>i)); cout<<" ";}
float h(float p) {return p*(1-p) ? (-p*log(p) - (1-p)*log(1-p))/log(2) : 0 ;}

struct coding{                      // THE CODING CONTAINER   
    uint64_t * tr;                  // transition function - defines encoding
    uint64_t state;                 // current state    
    coding(){                       // generate pseudorandom tr[] defining the coding                
        tr = new uint64_t[Np];
        for(int i=0; i<Np; i++){
            for(int j=0; j<64; j+=16) tr[i] |= (uint64_t)(rand() & 65535) << j;         // tr is random  
        }   
    }
    ~coding(){delete[] tr;}
    inline uint64_t encstep(uint symbol){              // encoding step
        uint64_t t= tr[symbol] ^ state;
        state = (t >> 1) | ((t&1) << 63);          // cyclic shift
        return t;
    };
    void encode(vector<byte> &inseq, vector<vector<byte> > &packets){   // encode inseq into 64 packets
        for(int i=0; i<64; i++) packets.push_back(vector<byte>());
        int buf=0, nbe=0, nb = 0; 
        state = INITSTATE;
        for(int i=0; i < inseq.size(); i++){  buf = buf | (inseq[i] << nb); nb += 8;
            while((nb >= N) || ((nb > 0) && (i == inseq.size()-1))) {  
                uint64_t t = encstep(buf & mask); //print(buf & mask, N); 
                buf >>= N; nb -= N;          
                if(nbe==0) {for(int i=0; i<64; i++) packets[i].push_back(0);}     // elongate packets
                for(int i=0; i<64; i++) {packets[i].back() |= (t&1) << nbe; t>>=1; }
                nbe = (nbe+1) & 7;                  // which bit in byte of packets
            };
        };
    };    
};

class test{
private:
    vector<byte> inseq;                     // input sequence
    vector<vector<byte> > packets;          // 64 output sequences (packets)    

public:
    int l,m;                            // length of input sequence (bytes)
    vector<int> which;                  // numbers of m received packets
    vector<vector<byte> > received;     // m received packets     
    uint64_t last_state;
    
    test(coding &cod, int len, vector<float> eps){
        l=len; m = eps.size();
        for(int i=0; i<l; i++) inseq.push_back(rand() & 255);       // generate random input sequence
        cod.encode(inseq, packets); last_state = cod.state;
        //for(int i=0; i<64; i++) {print(packets[i][0]); cout<<endl;};
        int t[64]; for(int i=0; i<64; i++) t[i]=i;
        for(int i=0; i<m; i++){                 // find random m unique packets
            int tm = rand() % (64-i); which.push_back(t[tm]);      
            received.push_back(packets[tm]);            
            t[tm] = t[63-i];
        }
        // for(int i=0; i<m; i++) cout<<which[i]<<" ";
        for(int i=0; i<m; i++)                              // DAMAGE received packets
            for(byte &c : received[i])
                for(int j=0; j<8; j++) c ^= ((float)rand()/RAND_MAX < eps[i])<<j;  
    }
    float check(vector<byte> & rep){                    // what fraction of bytes was properly corrected
        float agree = 0;
        for(int i=0; i<min(rep.size(), inseq.size()); i++) if(rep[i]==inseq[i]) agree++;
        return agree/inseq.size();
    }    
};
// ---------------------- THE RECONSTRUCTION PART  -----------------------------
struct Node {               // node of the correction tree
    uint16_t position;        // currently decoded bit block (data[position]) - change to 32 if larger than 64kB frame         
    uint64_t state;           // current state
    uint32_t parent;          // the number of parent node
    float weight;             // weight of this node
    uint32_t last_child;      // last considered child for this node
    byte symbol;              // symbol that lead the parent here  
};
struct HeapNode {                   // we need heap of nodes worth considering
    uint32_t node;                    // which node it corresponds to
    float weight;                     // weight after applying nodes[node].last_child 
    bool operator<(const struct HeapNode & b) const { return this->weight < b.weight;}
};
typedef vector<HeapNode> Heap;
inline void heap_push(Heap & heap, HeapNode n){
    heap.push_back(n); push_heap(heap.begin(),heap.end()); }
inline HeapNode heap_pop(Heap & heap){
    HeapNode n = heap.front();pop_heap(heap.begin(),heap.end());heap.pop_back(); return n;
}

class correct{
public:
    vector<uint> data;                      // data[i] contains i-th bits from all received packets]
    int l;                                  // data.size() 
    vector<int> which;
    vector<float> weights;
    float wg0;                              // no error weight increase
    int m, mp;                              // m is the number of received packets
    vector<HeapNode> heap;                        // heap of nodes worth considering
    vector<Node> nodes;                           // huge table of all nodes   
    int steps;
        
    correct(vector<float> &eps){            // generates coding tables
        m = eps.size(); mp = 1<<m;  
        wg0=1;                              // chosen experimentally ?!?
        for(float e:eps) 
            wg0 += log(max((float)0.00001, 1-e))/log(2);
        vector<float> erpen;                // error penalties for all m positions
        for(double e:eps) erpen.push_back((log(max(0.00001,e))-log(max(0.00001,1-e)))/log(2));
        for(int i=0; i<mp; i++){
            float wg=wg0;
            for(int j=0; j<m; j++) wg += ((i>>j) & 1) * erpen[j];
            weights.push_back(wg);
            //print(i,m); cout<< wg<<endl;
        }        
    }
    inline int extract(uint64_t s) {            // extract used bits from state
        int out=0;
        for(int i=0; i<m; i++) {out |= ((s >> which[i]) & 1) << i; }
        return out;
    }    
    
    vector<byte> reconstruct(coding &cod, int len, vector<vector<byte> > &received, vector<int> &wh, uint64_t last_state){      // the main reconstruction procedure
        which=wh; l = ceil((float)len * 8 / N);
        //for(int i=0; i<m; i++) {print(received[i][0]); cout<< endl;}
        for(int i=0; i<l; i++){         // received -> data: bit blocks for succeeding positions
            uint buf=0;
            for(int j=0; j<m; j++) buf |= ((received[j][i >> 3] >> (i&7)) & 1) << j;
            data.push_back(buf);
        }
        //for(int i=0; i<l; i++){print(data[i],m); cout<<endl;}   
         // ----------- build candidate list  -----------
        vector<uint16_t> candidates;                // the list of reconstruction candidates
        vector<int> extr;                           // values extracted from transition function
        for(int i=0; i<Np; i++) extr.push_back(extract(cod.tr[i]));
        //int j=0; for(auto c:extr) {cout<<j++<<": ";print(c,m);} cout<<endl;
        vector<pair<float,int> > inter;             // list of possible interpretations of received xor       
        for(int i=0; i<mp; i++){                    // = extract(val) = xor of data[t] and extract[state]
            inter.clear();
            for(int j=0; j<Np; j++) inter.push_back({-weights[i ^ extr[j]],j});
            sort(inter.begin(),inter.end());
            for(int j=0; j<Np; j++) candidates.push_back(inter[j].second);                
        }
        // for(int i=0; i<mp; i++) {print(i,m);for(int j=0; j<Np; j++) cout<<candidates[j + (i<<N)]<<" "; cout<<endl;}
        
        heap.clear(); nodes.clear();          
        Node nn;                                              // new node
        nn.last_child=1;    nodes.push_back(nn);              // root and guardian
        nn.last_child=0; 
        volatile bool correct = false;
        cod.state = INITSTATE;                                // preparing the root of the correction tree
        uint32_t parent = 0, position = 0, cpos, ppos;                                                     
        byte symbol = 0;                                                               
        float weight = 0;                                      
      // --------------------  THE RECONSTRUCTION LOOP -------------------------
        while(nodes.size() < STEP_LIMIT && cod.state!= last_state){
            if(position<l){                                 // create node
                nn.position = position;                                // the node is just before data[position]
                nn.symbol = symbol;                                    // parent's symbol leading to this node (for tracing the final reconstruction)
                nn.state = cod.state;                                  // state in this node
                nn.parent = parent;                                    // parent is nodes[parent]
                nn.weight = weight;                                    // weight here
                nn.last_child = (extract(cod.state) ^ data[position]) << N;       // position in candidate[]: nn.last_child ... nn.last_child + 2^N - 1 (sorted)
                //print(extract(cod.state) ^ data[position],m); print(candidates[nn.last_child],N); 
                //print(extr[candidates[nn.last_child]],m); 
                //cout<<weights[(nn.last_child >> N) ^ extr[candidates[nn.last_child]]]
                 //       <<" "<<position<<" "<<weight<<" "<<parent<<" ";print(symbol,N);cout<<endl;
                uint cur = nodes.size();             
                nodes.push_back(nn);
                heap_push(heap, {cur, weight + weights[(nn.last_child >> N) ^ extr[candidates[nn.last_child]]]});                
            }
                          
             Node * temp = & nodes[parent];                     // shift parent to the next child
             int lc = ++ temp->last_child;
             if(lc & mask) {                                    // 0 when all possibilities checked
                 heap_push(heap, {parent, temp->weight + weights[(lc >> N) ^ extr[candidates[lc]]]}); 
             }
             
             HeapNode tn = heap_pop(heap);               // get new node
             parent = tn.node; weight = tn.weight;
             temp = & nodes[parent];  
             position = temp->position + 1;
             symbol = candidates[temp->last_child];
             cod.state = temp->state;
             cod.encstep(symbol);               
        }        
        
     vector<byte> stack ={symbol}, rep;                       // apply the correction 
     while(parent > 1){nn = nodes[parent]; parent = nn.parent; stack.push_back(nn.symbol);}
     int buf=0,nb=0;
     for(int i=stack.size()-1; i>=0; i--) {buf |= stack[i]<<nb; nb+=N;
        if(nb>=8 || (nb>0 && i==0)) {rep.push_back(buf & 255); buf >>= 8; nb-=8;}
     }
     steps = nodes.size();
     return rep;         
    }   
};

int main() {
    int len = 1000;                   // byte length of the message
    srand(12345);
    coding cod;
    vector<float> eps = {0.0, 0.01, 0.01, 0.02, 0.09};                      // THE NUMBER AND DAMAGES OF RECEIVED PACKETS
    float sum=0; for(int i=0; i<eps.size(); i++) sum += (1-h(eps[i]));
    cout << "sum of 1-h(eps) informational content: "<< sum<<" , N = "<< N<< endl; 
    test t(cod,len,eps);
    correct cor(eps);
    //for(byte c:t.inseq) print(c); cout<<endl<<endl;
    vector<byte> rep = cor.reconstruct(cod, len, t.received, t.which, t.last_state);
    //for(byte c:rep) print(c); cout<<endl;
    cout<<"fraction of properly reconstructed: "<<t.check(rep)<<endl;
    cout<<"performed steps: "<<cor.steps;
    return 0;
}

